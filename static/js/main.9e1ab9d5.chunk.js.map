{"version":3,"sources":["serviceWorker.js","components/axis/bottom-axis.js","components/axis/left-axis.js","components/tooltip/tooltip.js","components/scatter-plot/scatter-plot.js","index.js"],"names":["Boolean","window","location","hostname","match","BottomAxis","domain","range","pixelsPerTick","strokeWidth","ticks","useMemo","xScale","d3","width","Math","abs","numberOfTicksTarget","max","floor","map","value","xOffset","round","d","join","fill","stroke","key","transform","x1","y1","x2","y2","style","fontSize","textAnchor","LeftAxis","yScale","height","yOffset","convert","minutes","numbers","split","parseFloat","hoveredBar","scales","styles","position","left","Year","top","Time","className","colSpan","Name","Nationality","id","Doping","ScatterPlot","props","state","data","isLoading","toolBarData","onMouseOver","bind","this","setState","fetch","then","response","json","datum","h","minTime","minYear","w","yDataScale","yAxisScale","i","cx","cy","r","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCfOC,EAAa,SAAC,GAKlB,IAAD,IAJJC,cAII,MAJG,CAAC,EAAG,KAIP,MAHJC,aAGI,MAHE,CAAC,GAAI,KAGP,MAFJC,qBAEI,MAFU,GAEV,MADJC,mBACI,MADQ,EACR,EACEC,EAAQC,mBAAQ,WACpB,IAAMC,EAASC,MACZP,OAAOA,GACPC,MAAMA,GACHO,EAAQC,KAAKC,IAAIT,EAAM,GAAKA,EAAM,IAElCU,EAAsBF,KAAKG,IAC/B,EACAH,KAAKI,MACHL,EAAQN,IAGZ,OAAOI,EAAOF,MAAMO,GACjBG,KAAI,SAAAC,GAAK,MAAK,CACbA,QACAC,QAASP,KAAKQ,MAAMX,EAAOS,UAE9B,CACDf,EACAC,EACAC,IAEF,OACE,6BACE,0BACEgB,EAAG,CACD,IAAKjB,EAAM,GAAI,EACf,KAAM,EACN,IAAKA,EAAM,GACX,IAAK,GACLkB,KAAK,KACPC,KAAK,OACLC,OAAO,eACPlB,YAAaA,IAEdC,EAAMU,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACT,uBACEM,IAAKP,EACLQ,UAAS,oBAAeP,EAAf,SAET,0BACEQ,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHN,OAAO,eACPlB,YAAaA,IAEf,0BACEmB,IAAKP,EACLa,MAAO,CACLC,SAAU,OACVC,WAAY,SACZP,UAAW,qBAEXR,SC7DHgB,EAAW,SAAC,GAKhB,IAAD,IAJJ/B,cAII,MAJG,CAAC,EAAG,KAIP,MAHJC,aAGI,MAHE,CAAC,GAAI,KAGP,MAFJC,qBAEI,MAFU,GAEV,MADJC,mBACI,MADQ,EACR,EACEC,EAAQC,mBAAQ,WACpB,IAAM2B,EAASzB,MACZP,OAAOA,GACPC,MAAMA,GACHgC,EAASxB,KAAKC,IAAIT,EAAM,GAAKA,EAAM,IACnCU,EAAsBF,KAAKG,IAC/B,EACAH,KAAKI,MACHoB,EAAS/B,IAGb,OAAO8B,EAAO5B,MAAMO,GACjBG,KAAI,SAAAC,GAAK,MAAK,CACbA,QACAmB,QAASzB,KAAKQ,MAAMe,EAAOjB,UAE9B,CACDf,EACAC,EACAC,IAEF,OACE,uBAAGqB,UAAS,sBACV,6BACE,uBAAGA,UAAS,qBACV,0BACEL,EAAG,CACD,IAAK,EAAGjB,EAAM,GACd,IAAK,EACL,IAAKA,EAAM,GACX,KAAM,GACNkB,KAAK,KACPC,KAAK,OACLC,OAAO,eACPlB,YAAaA,IAEdC,EAAMU,KAAI,gBAAGC,EAAH,EAAGA,MAAgBmB,EAAnB,EAAUA,QAAV,OACT,uBACEZ,IAAKP,EACLQ,UAAS,uBAAkBW,EAAlB,MAET,0BACEV,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHN,OAAO,eACPlB,YAAaA,IAEf,0BACEmB,IAAKP,EACLa,MAAO,CACLC,SAAU,OACVC,WAAY,MACZP,UAAW,yBAEXR,W,YC9DpB,SAASoB,EAAQC,GACb,IAAIC,EAAUD,EAAQE,MAAM,KAC5B,OAAO7B,KAAKQ,MAAM,KAAKsB,WAAWF,EAAQ,IAAOE,WAAWF,EAAQ,IAAM,KAAM,IAGrE,kBAA2B,IAAzBG,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,OACjBnC,EAAmBmC,EAAnBnC,OAAQ0B,EAAWS,EAAXT,OACVU,EAAS,CACXC,SAAU,WACVC,KAAK,GAAD,OAAKtC,EAAOkC,EAAWK,MAAQ,GAA/B,MACJC,IAAI,GAAD,OAAKd,EAAOG,EAAQK,EAAWO,OAAS,GAAxC,OAGP,OACE,yBAAKC,UAAU,UAAUpB,MAAOc,GAC9B,+BACE,+BACE,4BACE,wBAAIO,QAAQ,KAAKT,EAAWU,QAGhC,+BACE,4BACE,wBAAID,QAAQ,KAAZ,gBAA8BT,EAAWW,cAE3C,wBAAIC,GAAG,UACL,wBAAIH,QAAQ,KAAKT,EAAWa,aCtBrBC,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,KACNC,WAAW,EACXC,YAAa,MAEjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPL,E,gEAUG,IAAD,OAChBC,KAAKC,SAAS,CAACL,WAAW,IAC1BM,MAAM,gGACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKJ,SAAS,CAAEN,KAAMU,EAAMT,WAAW,S,8BAGrDtB,GACJ,IAAIC,EAAUD,EAAQE,MAAM,KAC5B,OAAO7B,KAAKQ,MAAM,KAAKsB,WAAWF,EAAQ,IAAOE,WAAWF,EAAQ,IAAM,KAAM,M,kCAGxE+B,GACRN,KAAKC,UAAS,iBAAO,CACjBJ,YAAaS,Q,+BAIV,IAAD,SACsBN,KAAKN,MAAzBC,EADF,EACEA,KACR,GAFM,EACQC,UAEV,OAAO,0CAGX,GAAW,MAARD,EACC,OAAO,qDAGP,IAGMY,EAAI,IACJC,EAAU/D,IAAOkD,GAAM,SAACvC,GAAD,OAAO,EAAKiB,QAAQjB,EAAE6B,SAC7CwB,EAAUhE,IAAOkD,GAAM,SAACvC,GAAD,OAAOA,EAAE2B,QAEhCvC,EAASC,MACNP,OAAO,CAACuE,EAAQ,EAAGhE,IAAOkD,GAAM,SAACvC,GAAD,OAAOA,EAAE2B,UACzC5C,MAAM,CATC,GASSuE,MAEnBC,EAAalE,MACVP,OAAO,CAACsE,EAAS/D,IAAOkD,GAAM,SAACvC,GAAD,OAAO,EAAKiB,QAAQjB,EAAE6B,WACpD9C,MAAM,CAACoE,IAAa,IAEvBK,EAAanE,MACVP,OAAO,CAACsE,EAAS/D,IAAOkD,GAAM,SAACvC,GAAD,OAAO,EAAKiB,QAAQjB,EAAE6B,WACpD9C,MAAM,CAAC,EAAGoE,MAEnB,OAAO,yBAAKjB,GAAG,cAAa,yBAAK5C,MAAOgE,IAAWvC,OAAQoC,KACvD,uBAAG9C,UAAS,uBAAkB,EAAlB,MACPkC,EAAK3C,KACF,SAACI,EAAGyD,GACA,OAAO,4BACHrD,IAAKqD,EACLC,GAAItE,EAAOY,EAAE2B,MACbgC,GAAIR,EAAII,EAAW,EAAKtC,QAAQjB,EAAE6B,OAClC+B,EA1BL,EA2BK9B,UAAU,iBACV5B,KAAkB,IAAZF,EAAEmC,OAAe,SAAW,YAClChC,OAAO,QACPlB,YAAY,IACZyD,YAAa,kBAAM,EAAKA,YAAY1C,SAKhD,uBAAGK,UAAS,uBAAkB8C,EAAlB,MACR,kBAAC,EAAD,CACIrE,OAAQM,EAAON,SACfC,MAAOK,EAAOL,WAGtB,uBAAGsB,UAAS,oBA3CJ,GA2CI,aA3CJ,GA2CI,MACR,kBAAC,EAAD,CACIvB,OAAQ0E,EAAW1E,SACnBC,MAAOyE,EAAWzE,aAKN,MAA1B6D,KAAKN,MAAMG,YACT,kBAAC,EAAD,CACInB,WAAYsB,KAAKN,MAAMG,YACvBlB,OAAQ,CAACnC,OAAQA,EAAQ0B,OAAQ0C,KAErC,U,GA/FyBK,aCDzCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK9B,GAAG,UACN,qEACA,yBAAKA,GAAG,gBACN,wBAAIA,GAAG,iBAAP,mBACA,kBAAC,EAAD,SAKN+B,SAASC,eAAe,SLkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e1ab9d5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useMemo} from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const BottomAxis = ({\r\n    domain=[0, 100],\r\n    range=[10, 290],\r\n    pixelsPerTick=50,\r\n    strokeWidth=2\r\n  }) => {\r\n    const ticks = useMemo(() => {\r\n      const xScale = d3.scaleLinear()\r\n        .domain(domain)\r\n        .range(range)\r\n      const width = Math.abs(range[1] - range[0])\r\n    //   const pixelsPerTick = 30\r\n      const numberOfTicksTarget = Math.max(\r\n        1,\r\n        Math.floor(\r\n          width / pixelsPerTick\r\n        )\r\n      )\r\n      return xScale.ticks(numberOfTicksTarget)\r\n        .map(value => ({\r\n          value,\r\n          xOffset: Math.round(xScale(value))\r\n        }))\r\n    }, [\r\n      domain,\r\n      range,\r\n      pixelsPerTick\r\n    ])\r\n    return (\r\n      <svg>\r\n        <path\r\n          d={[\r\n            \"M\", range[0], 6,\r\n            \"v\", -6,\r\n            \"H\", range[1],\r\n            \"v\", 6,\r\n          ].join(\" \")}\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth={strokeWidth}\r\n        />\r\n        {ticks.map(({ value, xOffset }) => (\r\n          <g\r\n            key={value}\r\n            transform={`translate(${xOffset}, 0)`}\r\n          >\r\n            <line\r\n              x1=\"0\"\r\n              y1=\"0\"\r\n              x2=\"0\"\r\n              y2=\"6\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth={strokeWidth}\r\n            />\r\n            <text\r\n              key={value}\r\n              style={{\r\n                fontSize: \"10px\",\r\n                textAnchor: \"middle\",\r\n                transform: \"translateY(20px)\"\r\n              }}>\r\n              { value }\r\n            </text>\r\n          </g>\r\n        ))}\r\n      </svg>\r\n    )\r\n  }","import React, {useMemo} from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const LeftAxis = ({\r\n    domain=[0, 100],\r\n    range=[10, 290],\r\n    pixelsPerTick=50,\r\n    strokeWidth=2\r\n  }) => {\r\n    const ticks = useMemo(() => {\r\n      const yScale = d3.scaleLinear()\r\n        .domain(domain)\r\n        .range(range)\r\n      const height = Math.abs(range[1] - range[0])\r\n      const numberOfTicksTarget = Math.max(\r\n        1,\r\n        Math.floor(\r\n          height / pixelsPerTick\r\n        )\r\n      )\r\n      return yScale.ticks(numberOfTicksTarget)\r\n        .map(value => ({\r\n          value,\r\n          yOffset: Math.round(yScale(value))\r\n        }))\r\n    }, [\r\n      domain,\r\n      range,\r\n      pixelsPerTick\r\n    ])\r\n    return (\r\n      <g transform={`translate(-106, 0)`}>\r\n        <svg>\r\n          <g transform={`translate(100, 0)`}>\r\n            <path\r\n              d={[\r\n                \"M\", 0, range[0],\r\n                \"H\", 6,\r\n                \"V\", range[1],\r\n                \"H\", -6,\r\n              ].join(\" \")}\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth={strokeWidth}\r\n            />\r\n            {ticks.map(({ value, yOffset: yOffset }) => (\r\n              <g\r\n                key={value}\r\n                transform={`translate(0, ${yOffset})`}\r\n              >\r\n                <line\r\n                  x1=\"0\"\r\n                  y1=\"0\"\r\n                  x2=\"6\"\r\n                  y2=\"0\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth={strokeWidth}\r\n                />\r\n                <text\r\n                  key={value}\r\n                  style={{\r\n                    fontSize: \"10px\",\r\n                    textAnchor: \"end\",\r\n                    transform: \"translate(-5px, 4px)\"\r\n                  }}>\r\n                  { value }\r\n                </text>\r\n              </g>\r\n            ))}\r\n          </g>\r\n        </svg>\r\n      </g>\r\n    )\r\n  }","import React from 'react';\r\nimport './tooltip.css'\r\n\r\nfunction convert(minutes){\r\n    let numbers = minutes.split(\":\");\r\n    return Math.round(100*(parseFloat(numbers[0]) + (parseFloat(numbers[1]) / 60)))/100;\r\n}\r\n\r\nexport default ({hoveredBar, scales}) => {\r\n    const { xScale, yScale } = scales\r\n    const styles = {\r\n        position: \"absolute\",\r\n        left: `${xScale(hoveredBar.Year) + 30}px`,\r\n        top: `${yScale(convert(hoveredBar.Time)) - 30}px`\r\n    }\r\n  \r\n    return (\r\n      <div className=\"Tooltip\" style={styles}>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"1\">{hoveredBar.Name}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"1\">Nationality: {hoveredBar.Nationality}</td>\r\n            </tr>\r\n            <tr id=\"doping\">\r\n              <td colSpan=\"1\">{hoveredBar.Doping}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }","import React, {Component} from 'react';\r\nimport * as d3 from \"d3\";\r\nimport {BottomAxis} from '../axis/bottom-axis'\r\nimport {LeftAxis} from '../axis/left-axis'\r\nimport './scatter-plot.css' \r\nimport Tooltip from '../tooltip/tooltip'\r\n\r\nexport default class ScatterPlot extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: null,\r\n            isLoading: false,\r\n            toolBarData: null\r\n          };\r\n        this.onMouseOver = this.onMouseOver.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        fetch(\"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json\")\r\n            .then(response => response.json())\r\n            .then(json => this.setState({ data: json, isLoading: false }));\r\n    }\r\n\r\n    convert(minutes){\r\n        let numbers = minutes.split(\":\");\r\n        return Math.round(100*(parseFloat(numbers[0]) + (parseFloat(numbers[1]) / 60)))/100;\r\n    }\r\n\r\n    onMouseOver(datum){\r\n        this.setState(() => ({\r\n            toolBarData: datum\r\n        }));\r\n    }\r\n\r\n    render () {\r\n        const { data, isLoading } = this.state;\r\n        if (isLoading) {\r\n            return <p>Loading ...</p>;\r\n        }\r\n\r\n        if(data == null){\r\n            return <h1>No data available yet</h1>\r\n        }\r\n        else {\r\n            const padding = 50;\r\n            const radius = 7;\r\n            const w = 800;\r\n            const h = 500;\r\n            const minTime = d3.min(data, (d) => this.convert(d.Time));\r\n            const minYear = d3.min(data, (d) => d.Year);\r\n\r\n            const xScale = d3.scaleLinear()\r\n                    .domain([minYear-2, d3.max(data, (d) => d.Year)])\r\n                    .range([padding, w - padding]);\r\n\r\n            const yDataScale = d3.scaleLinear()\r\n                    .domain([minTime, d3.max(data, (d) => this.convert(d.Time))])\r\n                    .range([h - padding, 0]);\r\n\r\n            const yAxisScale = d3.scaleLinear()\r\n                    .domain([minTime, d3.max(data, (d) => this.convert(d.Time))])\r\n                    .range([0, h - padding]);\r\n\r\n            return <div id=\"svg-holder\"><svg width={w+padding} height={h+padding}>\r\n                <g transform={`translate(0, ${0})`}>\r\n                    {data.map(\r\n                        (d, i) => {\r\n                            return <circle\r\n                                key={i}\r\n                                cx={xScale(d.Year)}\r\n                                cy={h - yDataScale(this.convert(d.Time))}\r\n                                r={radius}\r\n                                className=\"plotted-circle\"\r\n                                fill={d.Doping == \"\" ? \"orange\" : \"lightblue\"}\r\n                                stroke=\"black\"\r\n                                strokeWidth=\"1\"\r\n                                onMouseOver={() => this.onMouseOver(d)}\r\n                                >\r\n                            </circle>;\r\n                        }\r\n                    )}\r\n                    <g transform={`translate(0, ${h})`}>\r\n                        <BottomAxis\r\n                            domain={xScale.domain()}\r\n                            range={xScale.range()}\r\n                        />\r\n                    </g>\r\n                    <g transform={`translate(${padding}, ${padding})`}>\r\n                        <LeftAxis\r\n                            domain={yAxisScale.domain()}\r\n                            range={yAxisScale.range()}\r\n                        />\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n            { this.state.toolBarData != null ?\r\n                <Tooltip\r\n                    hoveredBar={this.state.toolBarData}\r\n                    scales={{xScale: xScale, yScale: yAxisScale}}\r\n                /> :\r\n                null\r\n            }\r\n        </div>;\r\n\r\n            }\r\n        }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ScatterPlot from './components/scatter-plot/scatter-plot'\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"holder\">\n      <h1>Doping in Professional Bicycle Racing</h1>\n      <div id=\"vertical-div\">\n        <h2 id=\"vertical-text\">Time in Minutes</h2>\n        <ScatterPlot />\n      </div>\n    </div>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}